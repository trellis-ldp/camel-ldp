plugins {
    id 'biz.aQute.bnd.builder' version '6.3.0'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'net.researchgate.release' version '2.8.1'
    id 'org.sonarqube' version '3.3'
}

apply plugin: 'maven'
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'checkstyle'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'jacoco'

sourceCompatibility = 11
targetCompatibility = 11

group = 'org.trellisldp'
description = 'LDP Utilities for Apache Camel'

ext {
    moduleName = 'org.trellisldp.camel'
    vendor = 'Trellis LDP'
    homepage = 'https://www.trellisldp.org'
    docURL = 'https://trellis-ldp.github.io/camel-ldp/'
    license = 'Apache 2'

    /* Dependencies */
    camelVersion = '3.3.0'
    slf4jVersion = '1.7.30'

    /* Testing */
    activationApiVersion = '1.2.2'
    jaxbApiVersion = '2.3.3'
    junitPlatformVersion = '1.6.2'
    junitVersion = '5.6.2'

    /* Tooling */
    checkstyleVersion = '8.34'
    jacocoVersion = '0.8.6'
    logbackVersion = '1.2.3'

    /* OSGi */
    camelVersionRange = '[3,4)'
    projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

dependencies {
    api group: 'org.apache.camel', name: 'camel-api', version: camelVersion

    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion

    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: junitPlatformVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
    testImplementation group: 'org.apache.camel', name: 'camel-test-junit5', version: camelVersion
    testImplementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: jaxbApiVersion
    testImplementation group: 'jakarta.activation', name: 'jakarta.activation-api', version: activationApiVersion
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

release {
    tagTemplate = '$name-$version'
}

jar {
    from ("$rootDir/LICENSE") {
        into "META-INF"
    }
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from ("$rootDir/LICENSE") {
        into "META-INF"
    }
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier 'javadoc'
    from ("$rootDir/LICENSE") {
        into "META-INF"
    }
    from javadoc
}

artifacts {
    archives javadocJar
    archives sourceJar
    archives (file('build/resources/main/features.xml')) {
        classifier 'features'
        type 'xml'
    }
}

jacoco {
    toolVersion = jacocoVersion
}

license {
    include "**/*.java"
    header rootProject.file('buildtools/src/main/resources/license/HEADER.txt')
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                packaging = 'jar'
                url = 'https://www.trellisldp.org'
                inceptionYear = '2017'
                name = 'LDP Utilities for Apache Camel'
                description = 'Utilities for asynchronous integrations with Apache Camel'

                organization {
                    name = project.vendor
                    url = project.homepage
                }

                developers {
                    developer {
                        id = 'acoburn'
                        name = 'Aaron Coburn'
                        email = 'acoburn (at) apache (dot) org'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/trellis-ldp/camel-ldp.git'
                    developerConnection = 'scm:git:git@github.com/trellis-ldp/camel-ldp.git'
                    url = 'https://github.com/trellis-ldp/camel-ldp'
                    tag = 'HEAD'
                }

                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                        comments = 'Copyright (c) 2017-2019 Trellis LDP'
                    }
                }

            }
            pom.withXml {
                // eliminate test-scoped dependencies
                asNode().dependencies.removeAll { dep -> dep.scope == "test" }
            }

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }

            artifact(javadocJar) {
                classifier = 'javadoc'
            }
        }
    }
    repositories {
        maven {
            def sonatypeUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv("SONATYPE_USERNAME") ?: ""
            def sonatypePassword = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv("SONATYPE_PASSWORD") ?: ""
            if (version.endsWith("SNAPSHOT")) {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

processResources {
    outputs.upToDateWhen { false }
    expand project.properties
}

signing {
    required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications
}

tasks.withType(Sign) {
    onlyIf { !version.endsWith("SNAPSHOT") }
}

checkstyle {
    configFile = rootProject.file('buildtools/src/main/resources/checkstyle/checkstyle.xml')
    configProperties.checkstyleConfigDir = rootProject.file('buildtools/src/main/resources/checkstyle/')
    toolVersion = checkstyleVersion
}

// Ignore alpha, beta, milestone and release candidates
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject("Release Candidate")
            }
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "LDP Utilities for Camel"
        property "sonar.projectKey", "org.trellisldp:camel-ldp"
        property "sonar.links.homepage", "https://github.com/trellis-ldp/trellis"
        property "sonar.links.issue", "https://github.com/trellis-ldp/camel-ldp/issues"
        property "sonar.links.scm_dev", "scm:git:git@github.com:trellis-ldp/camel-ldp.git"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

test {
    useJUnitPlatform()
}

task docs(type: Javadoc) {
    outputs.upToDateWhen { false }
    source sourceSets.main.allJava
    classpath = files(sourceSets.main.compileClasspath)
    destinationDir = new File(projectDir, "docs")
    options {
        links "https://docs.oracle.com/en/java/javase/11/docs/api/"
    }
}

task getVersion {
    doLast {
        println project.version
    }
}

afterReleaseBuild.dependsOn publish
afterReleaseBuild.dependsOn docs

